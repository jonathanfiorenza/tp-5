//ejercicio 2
/**
 * Clase Persona
 * Contiene propiedades bÃ¡sicas y mÃ©todos para verificar generaciÃ³n, mayorÃ­a de edad y mostrar datos.
 */
/**
 * Clase Persona
 * Propiedades: nombre, edad, DNI, sexo (H/M), peso, altura, aÃ±oNacimiento.
 */
class Persona {
    constructor(nombre, edad, dni, sexo, peso, altura, anioNacimiento) {
        this.nombre = nombre;
        this.edad = edad;
        this.dni = dni;
        this.sexo = sexo; // H: Hombre, M: Mujer
        this.peso = peso;
        this.altura = altura;
        this.anioNacimiento = anioNacimiento;
    }

    // --- MÃ©todos Requeridos ---

    /**
     * Muestra la generaciÃ³n a la que pertenece la persona utilizando la tabla proporcionada.
     * @returns {string} Mensaje con la generaciÃ³n y su rasgo caracterÃ­stico.
     */
    mostrarGeneracion() {
        let generacion = "";
        let rasgo = "";
        let anio = this.anioNacimiento;

        if (anio >= 1994 && anio <= 2010) {
            generacion = "GeneraciÃ³n Z";
            rasgo = "Irreverencia";
        } else if (anio >= 1981 && anio <= 1993) {
            generacion = "GeneraciÃ³n Y (Millennials)";
            rasgo = "FrustraciÃ³n";
        } else if (anio >= 1969 && anio <= 1980) {
            generacion = "GeneraciÃ³n X";
            rasgo = "ObsesiÃ³n por el Ã©xito";
        } else if (anio >= 1949 && anio <= 1968) {
            generacion = "Baby Boom";
            rasgo = "AmbiciÃ³n";
        } else if (anio >= 1930 && anio <= 1948) {
            generacion = "Silent Generation (Los niÃ±os de la posguerra)";
            rasgo = "Austeridad";
        } else {
            generacion = "GeneraciÃ³n no definida en la tabla";
            rasgo = "N/A";
        }

        return `âœ… GeneraciÃ³n: ${generacion}. Rasgo caracterÃ­stico: "${rasgo}".`;
    }

    /**
     * Indica si la persona es mayor de edad (>= 18 aÃ±os).
     * @returns {string} Mensaje indicando si es o no mayor de edad.
     */
    esMayorDeEdad() {
        if (this.edad >= 18) {
            return `ðŸŽ‰ Â¡${this.nombre} es mayor de edad! (Tiene ${this.edad} aÃ±os).`;
        } else {
            return `ðŸš« ${this.nombre} NO es mayor de edad (Tiene ${this.edad} aÃ±os).`;
        }
    }

    /**
     * Devuelve toda la informaciÃ³n de la persona en un formato legible.
     * @returns {string} Toda la informaciÃ³n del objeto formateada.
     */
    mostrarDatos() {
        return `
            <strong>Nombre:</strong> ${this.nombre}<br>
            <strong>Edad:</strong> ${this.edad} aÃ±os<br>
            <strong>DNI:</strong> ${this.dni}<br>
            <strong>Sexo:</strong> ${this.sexo} (${this.sexo === 'H' ? 'Hombre' : 'Mujer'})<br>
            <strong>Peso:</strong> ${this.peso} kg<br>
            <strong>Altura:</strong> ${this.altura} m<br>
            <strong>AÃ±o de Nacimiento:</strong> ${this.anioNacimiento}
        `;
    }
}

// --- LÃ³gica de la Interfaz (Igual a la versiÃ³n anterior) ---

let personaActual = null;

const formulario = document.getElementById('formularioPersona');
const controles = document.getElementById('controlesPersona');
const datosDiv = document.getElementById('datosPersona');

// Evento: Crear Persona
formulario.addEventListener('submit', function(e) {
    e.preventDefault();

    const nombre = document.getElementById('nombre').value;
    const edad = parseInt(document.getElementById('edad').value);
    const dni = document.getElementById('dni').value;
    const sexo = document.getElementById('sexo').value;
    const peso = parseFloat(document.getElementById('peso').value);
    const altura = parseFloat(document.getElementById('altura').value);
    const anioNacimiento = parseInt(document.getElementById('nacimiento').value);

    personaActual = new Persona(nombre, edad, dni, sexo, peso, altura, anioNacimiento);

    controles.classList.remove('d-none');
    datosDiv.innerHTML = personaActual.mostrarDatos();
    alert(`Â¡Persona ${nombre} creada con Ã©xito! Ahora puedes probar los mÃ©todos.`);
});

// Evento: Mostrar GeneraciÃ³n
document.getElementById('btnGeneracion').addEventListener('click', () => {
    if (personaActual) {
        alert(personaActual.mostrarGeneracion());
    }
});

// Evento: Es Mayor de Edad
document.getElementById('btnMayorEdad').addEventListener('click', () => {
    if (personaActual) {
        alert(personaActual.esMayorDeEdad());
    }
});

// Evento: Mostrar Datos Completos
document.getElementById('btnMostrarDatos').addEventListener('click', () => {
    if (personaActual) {
        datosDiv.innerHTML = personaActual.mostrarDatos();
    }
});